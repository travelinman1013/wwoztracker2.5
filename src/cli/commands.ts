import { Command } from 'commander';
import { config, validateEnvironment, printConfigSummary } from '../config/index.js';
import type { CLIOptions } from '../types/index.js';

export function createCLI(): Command {
  const program = new Command();

  program
    .name('wwoz-tracker')
    .description('WWOZ radio playlist tracker and Spotify curator')
    .version('2.5.0');

  program
    .option('-d, --dry-run', 'Run without making changes to Spotify playlists')
    .option('-p, --playlist-name <name>', 'Custom playlist name (default: auto-generated by date)')
    .option('-o, --once', 'Run once and exit (no continuous monitoring)')
    .option('-a, --all', 'Process all songs on the playlist page')
    .option('-v, --verbose', 'Enable verbose logging')
    .option('-n, --count <number>', 'Process only the first N songs', parseInt)
    .option('--config-check', 'Validate configuration and exit')
    .option('--test-connection', 'Test connections to WWOZ and Spotify and exit');

  program
    .command('run')
    .description('Start the WWOZ tracker (default command)')
    .action(async () => {
      await runTracker(program.opts());
    });

  program
    .command('config')
    .description('Show current configuration')
    .action(() => {
      printConfigSummary();
    });

  program
    .command('validate')
    .description('Validate environment and configuration')
    .action(() => {
      validateConfiguration();
    });

  program
    .command('test')
    .description('Test connections to external services')
    .action(async () => {
      await testConnections();
    });

  // Default action when no command is specified
  program.action(async () => {
    const opts = program.opts();
    
    if (opts.configCheck) {
      validateConfiguration();
      return;
    }
    
    if (opts.testConnection) {
      await testConnections();
      return;
    }
    
    await runTracker(opts);
  });

  return program;
}

export function parseOptions(program: Command): CLIOptions {
  const opts = program.opts();
  
  return {
    dryRun: opts.dryRun || config.dryRun,
    playlistName: opts.playlistName,
    once: opts.once,
    all: opts.all,
    verbose: opts.verbose,
  };
}

function validateConfiguration(): void {
  console.log('üîç Validating configuration...\n');
  
  const missingEnvVars = validateEnvironment();
  
  if (missingEnvVars.length > 0) {
    console.error('‚ùå Missing required environment variables:');
    missingEnvVars.forEach(envVar => console.error(`   - ${envVar}`));
    console.error('\nPlease check your .env file or environment setup.');
    process.exit(1);
  }
  
  console.log('‚úÖ All required environment variables are present');
  console.log('‚úÖ Configuration validation passed\n');
  
  printConfigSummary();
}

async function testConnections(): Promise<void> {
  console.log('üîç Testing connections...\n');
  
  // We'll implement these tests in the services
  console.log('üåê Testing WWOZ connection...');
  // const wwozOk = await testWWOZConnection();
  
  console.log('üéµ Testing Spotify connection...');
  // const spotifyOk = await testSpotifyConnection();
  
  console.log('\n‚úÖ Connection tests completed');
}

async function runTracker(options: CLIOptions): Promise<void> {
  const { WorkflowService } = await import('../services/WorkflowService.js');
  const { Logger } = await import('../utils/logger.js');
  const { config } = await import('../config/index.js');
  
  // Set verbose logging if requested
  if (options.verbose) {
    Logger.setLevel('debug');
  }

  Logger.info('üéµ WWOZ Tracker v2.5.0');
  Logger.info('Configuration loaded successfully', {
    dryRun: config.dryRun || options.dryRun,
    scrapeInterval: config.wwoz.scrapeInterval,
    logLevel: config.logging.level,
  });

  // Create and run workflow
  const workflow = new WorkflowService();
  await workflow.run(options);
}